// Validator.php
class Validator {
    use ValidationTrait;

    private $errors = [];
    private $cleaned = [];

    public function validate(array $data, array $rules) {
        foreach ($rules as $field => $ruleSet) {
            foreach ($ruleSet as $rule) {
                $this->applyRule($field, $rule, $data[$field] ?? null);
            }
        }

        return empty($this->errors);
    }

    private function applyRule($field, $rule, $value) {
        // Разбираем правило, если есть параметр (например min:3)
        if (strpos($rule, ':') !== false) {
            list($ruleName, $param) = explode(':', $rule);
        } else {
            $ruleName = $rule;
            $param = null;
        }

        // Применяем валидацию
        $method = "validate" . ucfirst($ruleName);
        if (method_exists($this, $method)) {
            $isValid = $this->$method($value, $param);

            if (!$isValid) {
                $this->addError($field, "$field не прошел проверку на $ruleName");
            }
        }
    }

    private function addError($field, $message) {
        $this->errors[$field][] = $message;
    }

    // Получение ошибок
    public function getErrors() {
        return $this->errors;
    }

    // Получение очищенных данных
    public function getCleaned() {
        foreach ($_POST as $key => $value) {
            $this->cleaned[$key] = $this->cleanTags($this->cleanSpaces($value)); // Очистка данных
        }
        return $this->cleaned;
    }

    // Сохраняем ошибки в сессию
    public function flashErrors($key = 'form_errors') {
        $_SESSION[$key] = $this->getErrors();
    }
}
